{"version":3,"file":"Permissions.helper.js","names":["_Roles","require","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","PermissionsHelper","constructor","roles","ROLES","getPermissionsByRoleName","name","_this","role","find","permissions","_default","exports","default"],"sources":["../../../src/helpers/role/Permissions.helper.ts"],"sourcesContent":["import { ROLES } from \"@/config/role/Roles.config\";\nimport { IRole } from \"./Role.definations\";\n\nclass PermissionsHelper {\n  private roles: ReadonlyArray<IRole>;\n  constructor() {\n    this.roles = ROLES;\n  }\n\n  public async getPermissionsByRoleName(name: string): Promise<ReadonlyArray<string>> {\n    const role = this.roles.find((role) => role.name === name);\n    return role ? role.permissions : [];\n  }\n}\n\nexport default PermissionsHelper;\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAAmD,SAAAC,mBAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,cAAAC,CAAA,GAAAP,CAAA,CAAAK,CAAA,EAAAC,CAAA,GAAAE,CAAA,GAAAD,CAAA,CAAAE,KAAA,WAAAT,CAAA,gBAAAE,CAAA,CAAAF,CAAA,KAAAO,CAAA,CAAAG,IAAA,GAAAT,CAAA,CAAAO,CAAA,IAAAG,OAAA,CAAAC,OAAA,CAAAJ,CAAA,EAAAK,IAAA,CAAAV,CAAA,EAAAC,CAAA;AAAA,SAAAU,kBAAAd,CAAA,6BAAAC,CAAA,SAAAC,CAAA,GAAAa,SAAA,aAAAJ,OAAA,WAAAR,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAL,CAAA,CAAAgB,KAAA,CAAAf,CAAA,EAAAC,CAAA,YAAAe,MAAAjB,CAAA,IAAAD,kBAAA,CAAAM,CAAA,EAAAF,CAAA,EAAAC,CAAA,EAAAa,KAAA,EAAAC,MAAA,UAAAlB,CAAA,cAAAkB,OAAAlB,CAAA,IAAAD,kBAAA,CAAAM,CAAA,EAAAF,CAAA,EAAAC,CAAA,EAAAa,KAAA,EAAAC,MAAA,WAAAlB,CAAA,KAAAiB,KAAA;AAGnD,MAAME,iBAAiB,CAAC;EAEtBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAGC,YAAK;EACpB;EAEaC,wBAAwBA,CAACC,IAAY,EAAkC;IAAA,IAAAC,KAAA;IAAA,OAAAX,iBAAA;MAClF,IAAMY,IAAI,GAAGD,KAAI,CAACJ,KAAK,CAACM,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACF,IAAI,KAAKA,IAAI,CAAC;MAC1D,OAAOE,IAAI,GAAGA,IAAI,CAACE,WAAW,GAAG,EAAE;IAAC;EACtC;AACF;AAAC,IAAAC,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEcZ,iBAAiB","ignoreList":[]}